Viienda kodutööna tegeleme ikka piltide üleslaadimisega seotud tegevustega.

1) Tehke klass "valmis"!
	Pakun välja, et klassi konstruktorile tuleks saata parameetrina veel vähemalt üks parameeter - pildifaili maksimaalne lubatud suurus. See võimaldab ka pildi suuruse kontrollimist klassis.
	Kes soovib, võib saata ka kolmanda parameetri, mille väärtuseks näiteks massiiv lubatud pilditüüpidega (image/jpeg jt). Siis saaks kasutada meie esimesel tunnil tehtud pilditüübi kontrolli näidet. Aga võime leppida ka praeguse näitega - ainult jpeg ja png ning muuta ei saa.
	Klassi konstruktorist kutsutakse välja ka klassi funktsioon, mis kontrollib, kas on pilt, lubatud suurusega, lubatud tööpi, et kas tohib üles laadida. Funktsioon võiks anda klassi muutujale error väärtuse. Siis saame edasi tegutseda vastavalt error muutuja väärtusele. See error peaks olema ka public muutuja, et klassi kasutav põhiprogramm saaks seda küsida ning vastavalt tegutseda.
	
	Klassis võiks olla failinime genereerimise funktsioon, mida saab aga ei pea kasutama.
	
	Originaalpildi talletamise funktsioon.
	
	Võite lisada ka EXIF info lugemise.
	
		// kõige ees on "@" märk, et vältida hoiatust, kui ei õnnestu lugeda
		@$exif = exif_read_data($this->picToUpload["tmp_name"], "ANY_TAG", 0, true);
		if(!empty($exif["DateTimeOriginal"])){
			//kui sai lugeda, siis omistan pildistamise kuupäeva klassi muutujale
			$this->photoDate = $exif["DateTimeOriginal"];
		} else {
			$this->photoDate = NULL;
		}
	
	Ja näiteks pildistamise kuupäeva (kui seda õnnestub lugeda) pildile vesimärgina lisamise.

		//määratakse teksti värv
		$textColor = imagecolorallocatealpha($this->myNewImage, 255,255,255, 60);//valge, 60% alpha
		Kirjutatakse tekst pildile, arameetriteks: pildiobjekt, teksti suurus (näiteks 14), , nurk (teksti saab kaldu panna), x-koordinaat, y-koordinaat, teksti värv (eelnevalt defineeritud), TTF-fondi url, kirjutatav tekst
		imagettftext($this->myNewImage, $size, 0, 10, $y, $textColor, "ARIALBD.TTF", $textToImage);
		
		Kui klass oma töö lõpetab, siis on on kõik vajalikud pildifailid salvestatud ja vaja veel ainult andmed andmebaasi talletada.
		
		Kes tahab, teeb rohkem!

2) lisage oma veebilehestikku ka lehed oma (sisseloginud kasutaja) üleslaetud piltide näitamiseks ja kõigi kasutajate poolt päris avalike või vähemalt sisseloginud kasutajatele lubatud piltide näitamiseks.
	Minu github'is on selleks privategallery.php ja semipublicgallery.php

	Teie funktsioon peaks iga pildi kohta tekitama <div> elemendi, mille sees oleks pildi thumbnail, selle all omaniku ees- ja perekonnanimi.
	Link normaalmõõdus pildile võib olla aga pole kohustuslik. Järgmisel tunnil ilmselt eemaldame lingi nagunii.
	Et lugeda vaid nõutud lehekülje jagu pilte, tuleb SQL päringu lõppu lisada:
		LIMIT ?,?
	kus esimene küsimärk tähistab vahele jäetavate andmebaasi kirjete hulka (palju pilte vahele jätta, näiteks kolmandal lehel tuleb kahe esimese lehe pildid vahele jätta, kui lehel on 5 pilti, siis kolmandal lehel jäetakse 10 vahele)
	teine küsimärk tähistab loetavate kirjete hulka (palju leheküljel on, meie näites 5.
	Loomulikult tuleb prepare käsus SQL päringus kasutada küsimärke ja väärtused siduda bind_param käsuga!
	
	Oma varasemaid oskusi kasutades, muutke galerii leht kenamaks, et pildid kõik kenasti ikka üksteise kõrvale paigutuksid (nii palju kui ekraani laius võimaldab).
	
	Galerii peaks olema jaotatud lehekülgedeks. Selle jaoks lisasin näite juppe siiasamasse github'i!
	
	Jõudu!